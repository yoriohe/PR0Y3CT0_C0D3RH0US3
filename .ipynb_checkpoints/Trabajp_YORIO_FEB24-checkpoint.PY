{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9a745d83",
   "metadata": {},
   "source": [
    "# RETENCION CLIENTES EMPRESA DE TELEFONIA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f03139d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importamos  Libreras\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pylab as plt\n",
    "import seaborn as sns # Entendiendo mis variables\n",
    "import pprint\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go\n",
    "from plotly.subplots import make_subplots\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "# Librería matriz de confusión\n",
    "from sklearn.metrics import confusion_matrix\n",
    "# Librería para curva de ROC\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "# Librerias para regresión logística\n",
    "import statsmodels.api as sm\n",
    "import statsmodels.formula.api as smf\n",
    "# Libreria para trabajar cadenas de texto\n",
    "import re\n",
    "# Librería para transformar etiquetas de texto (categóricas) en números. \n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from mlxtend.feature_selection import SequentialFeatureSelector as SFS\n",
    "from sklearn.linear_model import LinearRegression  \n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn import metrics\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0e58c744",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>gender</th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>Partner</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>tenure</th>\n",
       "      <th>PhoneService</th>\n",
       "      <th>MultipleLines</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <th>...</th>\n",
       "      <th>DeviceProtection</th>\n",
       "      <th>TechSupport</th>\n",
       "      <th>StreamingTV</th>\n",
       "      <th>StreamingMovies</th>\n",
       "      <th>Contract</th>\n",
       "      <th>PaperlessBilling</th>\n",
       "      <th>PaymentMethod</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>TotalCharges</th>\n",
       "      <th>Churn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7590-VHVEG</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>No phone service</td>\n",
       "      <td>DSL</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>29.85</td>\n",
       "      <td>29.85</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>34</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>56.95</td>\n",
       "      <td>1889.5</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>53.85</td>\n",
       "      <td>108.15</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7795-CFOCW</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>45</td>\n",
       "      <td>No</td>\n",
       "      <td>No phone service</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>42.30</td>\n",
       "      <td>1840.75</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>70.70</td>\n",
       "      <td>151.65</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   customerID  gender  SeniorCitizen Partner Dependents  tenure PhoneService  \\\n",
       "0  7590-VHVEG  Female              0     Yes         No       1           No   \n",
       "1  5575-GNVDE    Male              0      No         No      34          Yes   \n",
       "2  3668-QPYBK    Male              0      No         No       2          Yes   \n",
       "3  7795-CFOCW    Male              0      No         No      45           No   \n",
       "4  9237-HQITU  Female              0      No         No       2          Yes   \n",
       "\n",
       "      MultipleLines InternetService OnlineSecurity  ... DeviceProtection  \\\n",
       "0  No phone service             DSL             No  ...               No   \n",
       "1                No             DSL            Yes  ...              Yes   \n",
       "2                No             DSL            Yes  ...               No   \n",
       "3  No phone service             DSL            Yes  ...              Yes   \n",
       "4                No     Fiber optic             No  ...               No   \n",
       "\n",
       "  TechSupport StreamingTV StreamingMovies        Contract PaperlessBilling  \\\n",
       "0          No          No              No  Month-to-month              Yes   \n",
       "1          No          No              No        One year               No   \n",
       "2          No          No              No  Month-to-month              Yes   \n",
       "3         Yes          No              No        One year               No   \n",
       "4          No          No              No  Month-to-month              Yes   \n",
       "\n",
       "               PaymentMethod MonthlyCharges  TotalCharges Churn  \n",
       "0           Electronic check          29.85         29.85    No  \n",
       "1               Mailed check          56.95        1889.5    No  \n",
       "2               Mailed check          53.85        108.15   Yes  \n",
       "3  Bank transfer (automatic)          42.30       1840.75    No  \n",
       "4           Electronic check          70.70        151.65   Yes  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cargo Datasets y Verificamos su consistencia:\n",
    "\n",
    "url = 'https://raw.githubusercontent.com/yoriohe/PR0Y3CT0_C0D3RH0US3/main/WA_Fn-UseC_-Telco-Customer-Churn-Base.csv'\n",
    "\n",
    "df=  pd.read_csv(url,sep=\",\")\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "944b668c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "customerID           object\n",
       "gender               object\n",
       "SeniorCitizen         int64\n",
       "Partner              object\n",
       "Dependents           object\n",
       "tenure                int64\n",
       "PhoneService         object\n",
       "MultipleLines        object\n",
       "InternetService      object\n",
       "OnlineSecurity       object\n",
       "OnlineBackup         object\n",
       "DeviceProtection     object\n",
       "TechSupport          object\n",
       "StreamingTV          object\n",
       "StreamingMovies      object\n",
       "Contract             object\n",
       "PaperlessBilling     object\n",
       "PaymentMethod        object\n",
       "MonthlyCharges      float64\n",
       "TotalCharges         object\n",
       "Churn                object\n",
       "dtype: object"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Verificamos que Tipos de Datos son:\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6a0bf72e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convierto la columna de TotalCharges de Tipo Object a float\n",
    "df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9a217668",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Chequeo que no haya ningún duplicado en la columna de \"customerID\"\n",
    "boolean = df.duplicated(subset=['customerID']).any()\n",
    "print(boolean, end='\\n\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a28834e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 7043 entries, 0 to 7042\n",
      "Data columns (total 21 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   customerID        7043 non-null   object \n",
      " 1   gender            7043 non-null   object \n",
      " 2   SeniorCitizen     7043 non-null   int64  \n",
      " 3   Partner           7043 non-null   object \n",
      " 4   Dependents        7043 non-null   object \n",
      " 5   tenure            7043 non-null   int64  \n",
      " 6   PhoneService      7043 non-null   object \n",
      " 7   MultipleLines     7043 non-null   object \n",
      " 8   InternetService   7043 non-null   object \n",
      " 9   OnlineSecurity    7043 non-null   object \n",
      " 10  OnlineBackup      7043 non-null   object \n",
      " 11  DeviceProtection  7043 non-null   object \n",
      " 12  TechSupport       7043 non-null   object \n",
      " 13  StreamingTV       7043 non-null   object \n",
      " 14  StreamingMovies   7043 non-null   object \n",
      " 15  Contract          7043 non-null   object \n",
      " 16  PaperlessBilling  7043 non-null   object \n",
      " 17  PaymentMethod     7043 non-null   object \n",
      " 18  MonthlyCharges    7043 non-null   float64\n",
      " 19  TotalCharges      7032 non-null   float64\n",
      " 20  Churn             7043 non-null   object \n",
      "dtypes: float64(2), int64(2), object(17)\n",
      "memory usage: 1.1+ MB\n"
     ]
    }
   ],
   "source": [
    "# Analizamos características del dataset\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c11b9703",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "customerID           0\n",
       "gender               0\n",
       "SeniorCitizen        0\n",
       "Partner              0\n",
       "Dependents           0\n",
       "tenure               0\n",
       "PhoneService         0\n",
       "MultipleLines        0\n",
       "InternetService      0\n",
       "OnlineSecurity       0\n",
       "OnlineBackup         0\n",
       "DeviceProtection     0\n",
       "TechSupport          0\n",
       "StreamingTV          0\n",
       "StreamingMovies      0\n",
       "Contract             0\n",
       "PaperlessBilling     0\n",
       "PaymentMethod        0\n",
       "MonthlyCharges       0\n",
       "TotalCharges        11\n",
       "Churn                0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Busco valores nulos\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8e87792d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Llenar los valores faltantes en TotalCharges con MonthlyCharges\n",
    "df['TotalCharges'].fillna(df['MonthlyCharges'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bd861387",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "customerID          0\n",
       "gender              0\n",
       "SeniorCitizen       0\n",
       "Partner             0\n",
       "Dependents          0\n",
       "tenure              0\n",
       "PhoneService        0\n",
       "MultipleLines       0\n",
       "InternetService     0\n",
       "OnlineSecurity      0\n",
       "OnlineBackup        0\n",
       "DeviceProtection    0\n",
       "TechSupport         0\n",
       "StreamingTV         0\n",
       "StreamingMovies     0\n",
       "Contract            0\n",
       "PaperlessBilling    0\n",
       "PaymentMethod       0\n",
       "MonthlyCharges      0\n",
       "TotalCharges        0\n",
       "Churn               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Chequeo nuevamente si existen valores nulos\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e40b86eb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "customerID ['7590-VHVEG' '5575-GNVDE' '3668-QPYBK' ... '4801-JZAZL' '8361-LTMKD'\n",
      " '3186-AJIEK']\n",
      "gender ['Female' 'Male']\n",
      "SeniorCitizen [0 1]\n",
      "Partner ['Yes' 'No']\n",
      "Dependents ['No' 'Yes']\n",
      "tenure [ 1 34  2 45  8 22 10 28 62 13 16 58 49 25 69 52 71 21 12 30 47 72 17 27\n",
      "  5 46 11 70 63 43 15 60 18 66  9  3 31 50 64 56  7 42 35 48 29 65 38 68\n",
      " 32 55 37 36 41  6  4 33 67 23 57 61 14 20 53 40 59 24 44 19 54 51 26  0\n",
      " 39]\n",
      "PhoneService ['No' 'Yes']\n",
      "MultipleLines ['No phone service' 'No' 'Yes']\n",
      "InternetService ['DSL' 'Fiber optic' 'No']\n",
      "OnlineSecurity ['No' 'Yes' 'No internet service']\n",
      "OnlineBackup ['Yes' 'No' 'No internet service']\n",
      "DeviceProtection ['No' 'Yes' 'No internet service']\n",
      "TechSupport ['No' 'Yes' 'No internet service']\n",
      "StreamingTV ['No' 'Yes' 'No internet service']\n",
      "StreamingMovies ['No' 'Yes' 'No internet service']\n",
      "Contract ['Month-to-month' 'One year' 'Two year']\n",
      "PaperlessBilling ['Yes' 'No']\n",
      "PaymentMethod ['Electronic check' 'Mailed check' 'Bank transfer (automatic)'\n",
      " 'Credit card (automatic)']\n",
      "MonthlyCharges [29.85 56.95 53.85 ... 63.1  44.2  78.7 ]\n",
      "TotalCharges [  29.85 1889.5   108.15 ...  346.45  306.6  6844.5 ]\n",
      "Churn ['No' 'Yes']\n"
     ]
    }
   ],
   "source": [
    "#Me fijo las categorias dentro de cada columna para ver si hay algún error.\n",
    "for columna in df:\n",
    "  print(columna, df[columna].unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "710fa3f9",
   "metadata": {},
   "source": [
    "## **Features Selection**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fd033111",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>gender</th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>Partner</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>tenure</th>\n",
       "      <th>PhoneService</th>\n",
       "      <th>MultipleLines</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <th>...</th>\n",
       "      <th>DeviceProtection</th>\n",
       "      <th>TechSupport</th>\n",
       "      <th>StreamingTV</th>\n",
       "      <th>StreamingMovies</th>\n",
       "      <th>Contract</th>\n",
       "      <th>PaperlessBilling</th>\n",
       "      <th>PaymentMethod</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>TotalCharges</th>\n",
       "      <th>Churn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7590-VHVEG</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>No phone service</td>\n",
       "      <td>DSL</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>29.85</td>\n",
       "      <td>29.85</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>34</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>56.95</td>\n",
       "      <td>1889.50</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>53.85</td>\n",
       "      <td>108.15</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7795-CFOCW</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>45</td>\n",
       "      <td>No</td>\n",
       "      <td>No phone service</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>42.30</td>\n",
       "      <td>1840.75</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>70.70</td>\n",
       "      <td>151.65</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   customerID  gender  SeniorCitizen Partner Dependents  tenure PhoneService  \\\n",
       "0  7590-VHVEG  Female              0     Yes         No       1           No   \n",
       "1  5575-GNVDE    Male              0      No         No      34          Yes   \n",
       "2  3668-QPYBK    Male              0      No         No       2          Yes   \n",
       "3  7795-CFOCW    Male              0      No         No      45           No   \n",
       "4  9237-HQITU  Female              0      No         No       2          Yes   \n",
       "\n",
       "      MultipleLines InternetService OnlineSecurity  ... DeviceProtection  \\\n",
       "0  No phone service             DSL             No  ...               No   \n",
       "1                No             DSL            Yes  ...              Yes   \n",
       "2                No             DSL            Yes  ...               No   \n",
       "3  No phone service             DSL            Yes  ...              Yes   \n",
       "4                No     Fiber optic             No  ...               No   \n",
       "\n",
       "  TechSupport StreamingTV StreamingMovies        Contract PaperlessBilling  \\\n",
       "0          No          No              No  Month-to-month              Yes   \n",
       "1          No          No              No        One year               No   \n",
       "2          No          No              No  Month-to-month              Yes   \n",
       "3         Yes          No              No        One year               No   \n",
       "4          No          No              No  Month-to-month              Yes   \n",
       "\n",
       "               PaymentMethod MonthlyCharges  TotalCharges  Churn  \n",
       "0           Electronic check          29.85         29.85     No  \n",
       "1               Mailed check          56.95       1889.50     No  \n",
       "2               Mailed check          53.85        108.15    Yes  \n",
       "3  Bank transfer (automatic)          42.30       1840.75     No  \n",
       "4           Electronic check          70.70        151.65    Yes  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# guardo la base para cualquier consulta que quiera realizar\n",
    "df1 = df.copy(deep = True)\n",
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bc37c359",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Desccartamos la columna Customer ID y  Antigüedad_Categoria\n",
    "columns_to_drop = ['customerID']\n",
    "df1 = df1.drop(columns=columns_to_drop, errors='ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fc0d6924",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['SeniorCitizen', 'tenure', 'MonthlyCharges', 'TotalCharges'], dtype='object')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.describe().columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1e642d2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Buscamos aquellos features que no son numéricos si no se encuentran en la función describe.\n",
    "text_data_features = [i for i in list(df1.columns) if i not in list(df1.describe().columns)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a533afd9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['gender',\n",
       " 'Partner',\n",
       " 'Dependents',\n",
       " 'PhoneService',\n",
       " 'MultipleLines',\n",
       " 'InternetService',\n",
       " 'OnlineSecurity',\n",
       " 'OnlineBackup',\n",
       " 'DeviceProtection',\n",
       " 'TechSupport',\n",
       " 'StreamingTV',\n",
       " 'StreamingMovies',\n",
       " 'Contract',\n",
       " 'PaperlessBilling',\n",
       " 'PaymentMethod',\n",
       " 'Churn']"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Estos son los que deberé converir en 0 y 1\n",
    "text_data_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7cf6b9c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "gender  :  [0 1]  =  ['Female' 'Male']\n",
      "Partner  :  [1 0]  =  ['Yes' 'No']\n",
      "Dependents  :  [0 1]  =  ['No' 'Yes']\n",
      "PhoneService  :  [0 1]  =  ['No' 'Yes']\n",
      "MultipleLines  :  [1 0 2]  =  ['No phone service' 'No' 'Yes']\n",
      "InternetService  :  [0 1 2]  =  ['DSL' 'Fiber optic' 'No']\n",
      "OnlineSecurity  :  [0 2 1]  =  ['No' 'Yes' 'No internet service']\n",
      "OnlineBackup  :  [2 0 1]  =  ['Yes' 'No' 'No internet service']\n",
      "DeviceProtection  :  [0 2 1]  =  ['No' 'Yes' 'No internet service']\n",
      "TechSupport  :  [0 2 1]  =  ['No' 'Yes' 'No internet service']\n",
      "StreamingTV  :  [0 2 1]  =  ['No' 'Yes' 'No internet service']\n",
      "StreamingMovies  :  [0 2 1]  =  ['No' 'Yes' 'No internet service']\n",
      "Contract  :  [0 1 2]  =  ['Month-to-month' 'One year' 'Two year']\n",
      "PaperlessBilling  :  [1 0]  =  ['Yes' 'No']\n",
      "PaymentMethod  :  [2 3 0 1]  =  ['Electronic check' 'Mailed check' 'Bank transfer (automatic)'\n",
      " 'Credit card (automatic)']\n",
      "Churn  :  [0 1]  =  ['No' 'Yes']\n"
     ]
    }
   ],
   "source": [
    "le = LabelEncoder()\n",
    "for i in text_data_features :\n",
    "    df1[i] = le.fit_transform(df1[i])\n",
    "    print(i,' : ',df1[i].unique(),' = ',le.inverse_transform(df1[i].unique()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "fa608266",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Busco ver cuantos servicios de internet tiene cada cliente. Creo columna.\n",
    "\n",
    "df1[\"Cant_Internet\"] = df1[\"InternetService\"] + df1[\"OnlineSecurity\"] + df1[\"OnlineBackup\"] + df1[\"DeviceProtection\"] + df1[\"TechSupport\"] + df1[\"StreamingTV\"] + df1[\"StreamingMovies\"]\n",
    "\n",
    "# Cambiar cualquier valor igual a 'No internet service' a 0\n",
    "df1[\"Cant_Internet\"] = df1[\"Cant_Internet\"].apply(lambda x: 0 if x == 'No internet service' else x)\n",
    "\n",
    "# Cambiar cualquier valor mayor a 1 a 1\n",
    "df1[\"Cant_Internet\"] = df1[\"Cant_Internet\"].clip(upper=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ec947b7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creo la columna para saber si tienen servicio telefónico\n",
    "df1[\"PhoneServices\"]= df1[\"PhoneService\"]+df1[\"MultipleLines\"]\n",
    "#Creo columna para ver quienes tienen internet + telefono.\n",
    "df1[\"pack\"]= df1[\"PhoneServices\"] + df1[\"InternetService\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "224a2827",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>Partner</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>tenure</th>\n",
       "      <th>PhoneService</th>\n",
       "      <th>MultipleLines</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <th>OnlineBackup</th>\n",
       "      <th>...</th>\n",
       "      <th>StreamingMovies</th>\n",
       "      <th>Contract</th>\n",
       "      <th>PaperlessBilling</th>\n",
       "      <th>PaymentMethod</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>TotalCharges</th>\n",
       "      <th>Churn</th>\n",
       "      <th>Cant_Internet</th>\n",
       "      <th>PhoneServices</th>\n",
       "      <th>pack</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>29.85</td>\n",
       "      <td>29.85</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>56.95</td>\n",
       "      <td>1889.50</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>53.85</td>\n",
       "      <td>108.15</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>42.30</td>\n",
       "      <td>1840.75</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>70.70</td>\n",
       "      <td>151.65</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   gender  SeniorCitizen  Partner  Dependents  tenure  PhoneService  \\\n",
       "0       0              0        1           0       1             0   \n",
       "1       1              0        0           0      34             1   \n",
       "2       1              0        0           0       2             1   \n",
       "3       1              0        0           0      45             0   \n",
       "4       0              0        0           0       2             1   \n",
       "\n",
       "   MultipleLines  InternetService  OnlineSecurity  OnlineBackup  ...  \\\n",
       "0              1                0               0             2  ...   \n",
       "1              0                0               2             0  ...   \n",
       "2              0                0               2             2  ...   \n",
       "3              1                0               2             0  ...   \n",
       "4              0                1               0             0  ...   \n",
       "\n",
       "   StreamingMovies  Contract  PaperlessBilling  PaymentMethod  MonthlyCharges  \\\n",
       "0                0         0                 1              2           29.85   \n",
       "1                0         1                 0              3           56.95   \n",
       "2                0         0                 1              3           53.85   \n",
       "3                0         1                 0              0           42.30   \n",
       "4                0         0                 1              2           70.70   \n",
       "\n",
       "   TotalCharges  Churn  Cant_Internet  PhoneServices  pack  \n",
       "0         29.85      0              1              1     1  \n",
       "1       1889.50      0              1              1     1  \n",
       "2        108.15      1              1              1     1  \n",
       "3       1840.75      0              1              1     1  \n",
       "4        151.65      1              1              1     2  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "90aee1a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'tenure',\n",
       "       'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity',\n",
       "       'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',\n",
       "       'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod',\n",
       "       'MonthlyCharges', 'TotalCharges', 'Churn', 'Cant_Internet',\n",
       "       'PhoneServices', 'pack'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "fa0523e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "features= ['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'tenure',\n",
    "       'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity',\n",
    "       'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',\n",
    "       'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod',\n",
    "       'MonthlyCharges', 'TotalCharges', 'Churn', 'Cant_Internet',\n",
    "       'PhoneServices', 'pack']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "6c955fb8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7043, 23)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ¿Cuántos registros quedan?\n",
    "df1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "974546d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Separamos en train y test\n",
    "from sklearn.model_selection import train_test_split\n",
    "df_train,df_test = train_test_split(df1,\n",
    "                                    test_size = 0.2, #Porcentaje de muestra test \n",
    "                                    random_state = 43) #Semilla\n",
    "df_train = df_train.reset_index()\n",
    "df_test = df_test.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "cd198406",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Normalizamos los datos\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "X_train = df_train[features].values\n",
    "X_test = df_test[features].values\n",
    "# Defino escalador\n",
    "sc = StandardScaler()\n",
    "# Genero parámetros con train\n",
    "X_train = sc.fit_transform(X_train)\n",
    "# Le aplico el escalador a test\n",
    "X_test = sc.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "308488d3",
   "metadata": {},
   "source": [
    "# PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "3c6b08f8",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'addPCA_train'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_5236\\2978485817.py\u001b[0m in \u001b[0;36m?\u001b[1;34m()\u001b[0m\n\u001b[0;32m     10\u001b[0m \u001b[1;31m# Almaceno en dataframe y presento\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     11\u001b[0m \u001b[1;31m# Train\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     12\u001b[0m \u001b[0mPCA_train\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mPCA_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     13\u001b[0m \u001b[0mprefijo\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"PC_\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 14\u001b[1;33m \u001b[0mPCA_train\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mPCA_train\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0maddPCA_train\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns_prefix\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mprefijo\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     15\u001b[0m \u001b[1;31m# Test\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     16\u001b[0m \u001b[0mPCA_test\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mPCA_test\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     17\u001b[0m \u001b[0mprefijo\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"PC_\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, name)\u001b[0m\n\u001b[0;32m   5985\u001b[0m             \u001b[1;32mand\u001b[0m \u001b[0mname\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_accessors\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5986\u001b[0m             \u001b[1;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5987\u001b[0m         ):\n\u001b[0;32m   5988\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 5989\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'addPCA_train'"
     ]
    }
   ],
   "source": [
    "# Aplicacion de PCA\n",
    "from sklearn.decomposition import PCA\n",
    "# Inicio el objeto PCA\n",
    "pca = PCA()\n",
    "# Genero componentes con TRAIN\n",
    "PCA_train = pca.fit_transform(X_train)\n",
    "# Aplico a test\n",
    "PCA_test = pca.transform(X_test)\n",
    "\n",
    "# Almaceno en dataframe y presento\n",
    "# Train\n",
    "PCA_train = pd.DataFrame(data = PCA_train)\n",
    "prefijo = \"PC_\"\n",
    "PCA_train = PCA_train.addPCA_train.columns_prefix(prefijo)\n",
    "# Test\n",
    "PCA_test = pd.DataFrame(data = PCA_test)\n",
    "prefijo = \"PC_\"\n",
    "PCA_test = PCA_test.add_prefix(prefijo)\n",
    "# ¿Qué generé?\n",
    "PCA_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "45957b06",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03648049",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Preprocesamiento \n",
    "features = ['GrLivArea','GarageArea','LotFrontage','MasVnrArea','GarageCars','TotRmsAbvGrd','OverallQual']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b87b90d",
   "metadata": {},
   "source": [
    "## TRAIN Y TEST "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5398e6d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Separamos en train y test\n",
    "from sklearn.model_selection import train_test_split\n",
    "df_train,df_test = train_test_split(df1,\n",
    "                                    test_size = 0.2, #Porcentaje de muestra test \n",
    "                                    random_state = 43) #Semilla\n",
    "df_train = df_train.reset_index()\n",
    "df_test = df_test.reset_index()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "99614b91",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(f\" {df_train.shape} y test {df_test.shape}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c35efb25",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Normalizamos los datos\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "X_train = df_train[features].values\n",
    "X_test = df_test[features].values\n",
    "# Defino escalador\n",
    "sc = StandardScaler()\n",
    "# Genero parámetros con train\n",
    "X_train = sc.fit_transform(X_train)\n",
    "# Le aplico el escalador a test\n",
    "X_test = sc.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc2f125e",
   "metadata": {},
   "source": [
    "# Modelamos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d68fa16f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cómo quedó la división??\n",
    "resumen = df1.groupby('TRAIN').agg(      \n",
    "    Cant = ('Churn', 'count'),\n",
    "    Cant_Renuncia = ('Churn', 'sum'),    \n",
    "    Tasa_Renuncia = ('Churn', 'mean')\n",
    ").reset_index()\n",
    "# Calcular la tasa de éxito en porcentaje\n",
    "resumen['Tasa_Renuncia'] = (resumen['Tasa_Renuncia'] * 100).round(1)\n",
    "resumen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de08fee1",
   "metadata": {},
   "outputs": [],
   "source": [
    "cantidad = len(df1['Churn'])\n",
    "\n",
    "sns.countplot(data = df1,\n",
    "              x = \"TRAIN\")\n",
    "plt.xlabel('TRAIN / TEST')\n",
    "plt.ylabel('Cantidad de clientes')\n",
    "plt.title('Distribución de clientes en TRAIN y TEST')\n",
    "ax = plt.gca()\n",
    "for p in ax.patches:\n",
    "    x_text = p.get_x() + p.get_width() / 2.0  # Calcula la posición x del texto\n",
    "    y_text = p.get_height()  # Toma la altura de la columna\n",
    "    ax.text(x_text, y_text, f'{str(round(int(y_text)/cantidad,2) * 100)}%', # Indica posición x e y, y texto a mostrar \n",
    "            ha = 'center', # Alineación horizontal \n",
    "            va = 'bottom',  # Alineación vertical\n",
    "            fontsize = 10, color = 'black', fontweight = 'bold')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "619e3b2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.barplot(data = df1,\n",
    "                x = 'TRAIN',\n",
    "                y = 'Churn')\n",
    "plt.xlabel('TRAIN / TEST')\n",
    "plt.ylabel('Tasa de renuncia')\n",
    "plt.title('¿Es la tasa de renuncia igual en ambas subporciones de la muestra?')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9fbc4bc",
   "metadata": {},
   "source": [
    "## La respuesta es **\"Son similares  =>Para Entrenamiento es del 27,1 % y para test es del 25,3%\"**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27294563",
   "metadata": {},
   "source": [
    "# Modelo Base - Regresión Logística"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14369371",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Genero el modelo\n",
    "formula = \"Churn ~ Cant_Internet+PhoneServices+InternetService+PaymentMethod\"\n",
    "reg_log = smf.logit(formula, data = df1[df1['TRAIN']==1]).fit()\n",
    "# Ver el resumen de resultados\n",
    "print(reg_log.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4096b011",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ver coeficientes y p valores\n",
    "coeficientes = reg_log.params\n",
    "pvalores = reg_log.pvalues\n",
    "print(\"\")\n",
    "print(\"Coeficientes:\")\n",
    "print(coeficientes.round(4))\n",
    "print(\"\")\n",
    "print(\"P-Values:\")\n",
    "print(pvalores.round(6))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e991e69",
   "metadata": {},
   "source": [
    "El modelo indica que hay una relación significativa entre las variables predictoras (Contract y PaymentMethod) y la variable dependiente Churn(Renuncia). "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c302f5aa",
   "metadata": {},
   "source": [
    "1. Coeficientes del Modelo:\n",
    "Intercept: -3.2840\n",
    "Contract_pred: 4.8797\n",
    "tenure_pred: 3.2284\n",
    "InternetService: -0.0987\n",
    "PaymentMethod: -0.0981\n",
    "2. Estadísticas de Ajuste del Modelo:\n",
    "Pseudo R-squared: 0.1884\n",
    "El Pseudo R-squared proporciona una medida de cuánta varianza en la variable de respuesta (Churn) se explica por el modelo. En este caso, el 18.84% de la variabilidad se explica por las variables en el modelo.\n",
    "Log-Likelihood: -2340.3\n",
    "La log-verosimilitud es una medida de la adecuación del modelo. Cuanto más alto, mejor se ajusta el modelo a los datos.\n",
    "3. Evaluación de la Convergencia:\n",
    "Convergencia: Sí (converged: True)\n",
    "Indica que el algoritmo de optimización ha convergido con éxito a una solución.\n",
    "4. Pruebas de Significancia:\n",
    "Prueba de Razón de Verosimilitud (LLR p-value): 6.449e-234\n",
    "El p-valor extremadamente bajo indica que al menos una de las variables en el modelo es significativa para predecir la variable de respuesta \"Churn\".\n",
    "5. Interpretación de Coeficientes:\n",
    "Intercept: El log-odds de \"Churn\" cuando todas las demás variables son cero.\n",
    "Contract_pred: Un aumento en la variable Contract_pred se asocia con un aumento de 4.8797 unidades en el log-odds de \"Churn\".\n",
    "tenure_pred: Un aumento en la variable tenure_pred se asocia con un aumento de 3.2284 unidades en el log-odds de \"Churn\".\n",
    "InternetService: Un aumento en la variable InternetService se asocia con una disminución de 0.0987 unidades en el log-odds de \"Churn\".\n",
    "PaymentMethod: Un aumento en la variable PaymentMethod se asocia con una disminución de 0.0981 unidades en el log-odds de \"Churn\".\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4bda18d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predicciones \n",
    "df1['Predict_Prob_RegLog_1'] = reg_log.predict(df1)\n",
    "df1.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daa8eebb",
   "metadata": {},
   "source": [
    "Estas probabilidades representan la probabilidad estimada de que cada observación en el conjunto de datos pertenezca a la clase positiva ( 'Churn')."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "66eb2e87",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Análisis de distribución: ¿Las predicciones se distribuyen igual?\n",
    "sns.histplot(data = df1,\n",
    "             x = 'Predict_Prob_RegLog_1',\n",
    "             bins = 10,            \n",
    "             alpha = 0.25,\n",
    "             kde = True,\n",
    "             stat='probability',\n",
    "             hue = 'TRAIN')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d504318b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Groupby por prediccion de clase: \n",
    "df1['Predict_RegLog_Clase'] = df1['Predict_Prob_RegLog_1'] > 0.5\n",
    "resultados = df1.groupby('Predict_RegLog_Clase').agg(\n",
    "    Cant = ('Predict_RegLog_Clase', 'count'),              \n",
    "    Cant_Churn = ('Churn', 'sum'),            \n",
    "    Tasa_Churn = ('Churn', 'mean')    \n",
    ").reset_index()\n",
    "resultados"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff4f3a5c",
   "metadata": {},
   "source": [
    "Grupo False (Probabilidad <= 0.5):\n",
    "\n",
    "Hay 5835 observaciones en este grupo.\n",
    "\n",
    "De estas, 1154 están clasificadas como \"Churn\".\n",
    "\n",
    "La tasa de \"Churn\" en este grupo es 0.197772 (19.77%).\n",
    "\n",
    "Grupo True (Probabilidad > 0.5):\n",
    "\n",
    "Hay 1208 observaciones en este grupo.\n",
    "\n",
    "De estas, 715 están clasificadas como \"Churn\".\n",
    "\n",
    "La tasa de \"Churn\" en este grupo es 0.591887 (59.19%).\n",
    "\n",
    "Esta tabla te proporciona información sobre cómo se distribuyen las predicciones del modelo en función de la probabilidad y cómo se relaciona con la ocurrencia de \"Churn\". El grupo con probabilidades mayores a 0.5 tiene una tasa de \"Churn\" más alta en comparación con el grupo con probabilidades menores o iguales a 0.5."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "700379c8",
   "metadata": {},
   "source": [
    "## **Métricas:**\n",
    "\n",
    "**A continuación vamos a calcular algunas métricas y análisis interesantes:**\n",
    "\n",
    "**Matriz de confusión: usaremos un corte de 40% para definir la clasificación de sobrevive o no. Es decir, si la probabilidad es > 0.4, entonces asumimos que sobrevive.\n",
    "Métricas que surgen de esa matriz\n",
    "Curva de ROC y AUC**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1fc0c116",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1) Matriz de Confusión \n",
    "# Paso 1: Clasificar a los Clientes según las predicciones \n",
    "df1['Churn_Pred_1'] = np.where(df1['Predict_Prob_RegLog_1'] > 0.4, 1, 0)\n",
    "\n",
    "# Paso 2:  Calcular la matriz de confusión para test y train\n",
    "confusion_entrenamiento = confusion_matrix(df1[df1['TRAIN'] == 1]['Churn'], \n",
    "                                           df1[df1['TRAIN'] == 1]['Churn_Pred_1'])\n",
    "\n",
    "confusion_test = confusion_matrix(df1[df1['TRAIN'] == 0]['Churn'], \n",
    "                                    df1[df1['TRAIN'] == 0]['Churn_Pred_1'])\n",
    "\n",
    "print('Matriz de Confusión en entrenamiento:')\n",
    "print(confusion_entrenamiento)\n",
    "print('Matriz de Confusión en testeo:')\n",
    "print(confusion_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7358ae7a",
   "metadata": {},
   "source": [
    "**Matriz de Confusión en Entrenamiento:**\n",
    "\n",
    "\n",
    "Verdaderos Positivos (TP): 786\n",
    "\n",
    "El modelo predijo correctamente la clase positiva (Churn) en 786 casos.\n",
    "\n",
    "Verdaderos Negativos (TN): 2876\n",
    "\n",
    "El modelo predijo correctamente la clase negativa (No Churn) en 2876 casos.\n",
    "\n",
    "Falsos Positivos (FP): 724\n",
    "\n",
    "El modelo predijo incorrectamente la clase positiva (Churn) en 724 casos (falsos alarmas de Churn).\n",
    "\n",
    "Falsos Negativos (FN): 551\n",
    "\n",
    "El modelo predijo incorrectamente la clase negativa (No Churn) en 551 casos (omisiones de Churn).\n",
    "\n",
    "\n",
    "**Matriz de Confusión en Testeo:**\n",
    "\n",
    "Verdaderos Positivos (TP): 311\n",
    "\n",
    "El modelo predijo correctamente la clase positiva (Churn) en 311 casos.\n",
    "\n",
    "Verdaderos Negativos (TN): 1271\n",
    "\n",
    "El modelo predijo correctamente la clase negativa (No Churn) en 1271 casos.\n",
    "Falsos Positivos (FP): 303\n",
    "\n",
    "\n",
    "El modelo predijo incorrectamente la clase positiva (Churn) en 303 casos (falsos alarmas de Churn).\n",
    "Falsos Negativos (FN): 221\n",
    "\n",
    "\n",
    "El modelo predijo incorrectamente la clase negativa (No Churn) en 221 casos (omisiones de Churn)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6123d2ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Paso 3: Grafico\n",
    "# Primero defino la estructura de mis gráficos a mostras\n",
    "fig, ax = plt.subplots(nrows = 1,\n",
    "                      ncols = 2,\n",
    "                      figsize = (10,5)) \n",
    "\n",
    "# Luego indico lo que voy a dibujar en el primer cuadrante\n",
    "sns.heatmap(confusion_test, \n",
    "            annot=True, fmt='d', cmap='Greens', cbar=False, \n",
    "            ax=ax[0])\n",
    "ax[0].set_title('Testeo')\n",
    "ax[0].set_xlabel('Predicción')\n",
    "ax[0].set_ylabel('Real')\n",
    "\n",
    "# Luego indico lo que voy a dibujar en el segundo cuadrante\n",
    "sns.heatmap(confusion_entrenamiento, \n",
    "            annot=True, fmt='d', cmap='Blues', cbar=False, \n",
    "            ax=ax[1])\n",
    "ax[1].set_title('Entrenamiento')\n",
    "ax[1].set_xlabel('Predicción')\n",
    "ax[1].set_ylabel('Real')\n",
    "\n",
    "# Muestra\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "78e88553",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2) Calculemos las metricas, para eso vamos a guardar el resultado de cada cuadrante para utilizarlos \n",
    "\n",
    "# Paso 1: capturo cada uno de los elementos de la matriz de confusión \n",
    "Total_TEST = sum(sum(confusion_test))\n",
    "Total_TRAIN = sum(sum(confusion_entrenamiento))\n",
    "TP_TEST = confusion_test[1,1]\n",
    "TP_TRAIN = confusion_entrenamiento[1,1]\n",
    "TN_TEST = confusion_test[0,0]\n",
    "TN_TRAIN = confusion_entrenamiento[0,0]\n",
    "FP_TEST = confusion_test[0,1]\n",
    "FP_TRAIN = confusion_entrenamiento[0,1]\n",
    "FN_TEST = confusion_test[1,0]\n",
    "FN_TRAIN = confusion_entrenamiento[1,0]\n",
    "\n",
    "# Paso 2: Calculo métricas\n",
    "Precision_TEST = TP_TEST / (TP_TEST + FP_TEST)\n",
    "Precision_TRAIN = TP_TRAIN / (TP_TRAIN + FP_TRAIN)\n",
    "Recall_TEST = TP_TEST / (TP_TEST + FN_TEST)\n",
    "Recall_TRAIN = TP_TRAIN / (TP_TRAIN + FN_TRAIN)\n",
    "Accurancy_TEST = (TP_TEST + TN_TEST) / Total_TEST\n",
    "Accurancy_TRAIN = (TP_TRAIN + TN_TRAIN) / Total_TRAIN\n",
    "Especificidad_TEST = TN_TEST / (TN_TEST + FP_TEST)\n",
    "Especificidad_TRAIN = TN_TRAIN / (TN_TRAIN + FP_TRAIN)\n",
    "\n",
    "# Paso 3: Presento todo en una misma tabla \n",
    "metricas = pd.DataFrame(columns=['Poblacion', 'Metrica','Valor'])\n",
    "\n",
    "# Precision\n",
    "nuevo_dato = {'Poblacion': 'TEST', \n",
    "              'Metrica': 'Precision',\n",
    "              'Valor': Precision_TEST}\n",
    "metricas = pd.concat([metricas, pd.DataFrame([nuevo_dato])], ignore_index=True)\n",
    "nuevo_dato = {'Poblacion': 'TRAIN', \n",
    "              'Metrica': 'Precision',\n",
    "              'Valor': Precision_TRAIN}\n",
    "metricas = pd.concat([metricas, pd.DataFrame([nuevo_dato])], ignore_index=True)\n",
    "\n",
    "# Recall\n",
    "nuevo_dato = {'Poblacion': 'TEST', \n",
    "              'Metrica': 'Recall',\n",
    "              'Valor': Recall_TEST}\n",
    "metricas = pd.concat([metricas, pd.DataFrame([nuevo_dato])], ignore_index=True)\n",
    "nuevo_dato = {'Poblacion': 'TRAIN', \n",
    "              'Metrica': 'Recall',\n",
    "              'Valor': Recall_TRAIN}\n",
    "metricas = pd.concat([metricas, pd.DataFrame([nuevo_dato])], ignore_index=True)\n",
    "\n",
    "# Accurancy\n",
    "nuevo_dato = {'Poblacion': 'TEST', \n",
    "              'Metrica': 'Accurancy',\n",
    "              'Valor': Accurancy_TEST}\n",
    "metricas = pd.concat([metricas, pd.DataFrame([nuevo_dato])], ignore_index=True)\n",
    "nuevo_dato = {'Poblacion': 'TRAIN', \n",
    "              'Metrica': 'Accurancy',\n",
    "              'Valor': Accurancy_TRAIN}\n",
    "metricas = pd.concat([metricas, pd.DataFrame([nuevo_dato])], ignore_index=True)\n",
    "\n",
    "# Especificidad\n",
    "nuevo_dato = {'Poblacion': 'TEST', \n",
    "              'Metrica': 'Especificidad',\n",
    "              'Valor': Especificidad_TEST}\n",
    "metricas = pd.concat([metricas, pd.DataFrame([nuevo_dato])], ignore_index=True)\n",
    "nuevo_dato = {'Poblacion': 'TRAIN', \n",
    "              'Metrica': 'Especificidad',\n",
    "              'Valor': Especificidad_TRAIN}\n",
    "metricas = pd.concat([metricas, pd.DataFrame([nuevo_dato])], ignore_index=True)\n",
    "\n",
    "# Paso 4: Grafico \n",
    "plt.figure(figsize=(12, 5))\n",
    "sns.barplot(data=metricas,\n",
    "            x='Metrica',\n",
    "            y='Valor',\n",
    "            hue='Poblacion')\n",
    "plt.xlabel('Tipo de Métrica')\n",
    "plt.ylabel('Valor de la Métrica')\n",
    "plt.title('Métricas - MODELO 1')\n",
    "ax = plt.gca()\n",
    "for p in ax.patches:\n",
    "    x_text = p.get_x() + p.get_width() / 2.0\n",
    "    y_text = p.get_height()\n",
    "    ax.text(x_text, y_text, f'{str(round(y_text, 2) * 100)}%',\n",
    "            ha='center',\n",
    "            va='bottom',\n",
    "            fontsize=10, color='black', fontweight='bold')\n",
    "\n",
    "plt.legend(loc='lower right')    \n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "raw",
   "id": "4e2f5ac1",
   "metadata": {},
   "source": [
    "Precision (Precisión): La precisión es la proporción de observaciones positivas correctamente clasificadas entre todas las observaciones clasificadas como positivas. En otras palabras, mide la exactitud de las predicciones positivas. Cuanto más alto, mejor.\n",
    "\n",
    "Recall (Recuperación o Sensibilidad): El recall es la proporción de observaciones positivas correctamente clasificadas entre todas las observaciones reales positivas. Mide la capacidad del modelo para capturar todos los casos positivos. Cuanto más alto, mejor.\n",
    "\n",
    "Accuracy (Exactitud): La exactitud es la proporción de observaciones clasificadas correctamente (ya sea positivas o negativas) entre todas las observaciones. Mide la capacidad general del modelo para predecir correctamente. Cuanto más alto, mejor.\n",
    "\n",
    "Especificidad: La especificidad es la proporción de observaciones negativas correctamente clasificadas entre todas las observaciones reales negativas. Mide la capacidad del modelo para evitar falsos positivos. Cuanto más alto, mejor."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3c032f2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3) Curvas de ROC\n",
    "# Calcula las curvas ROC y el área bajo la curva (AUC) para entrenamiento y prueba\n",
    "\n",
    "y_train = df1.loc[df1['TRAIN'] == 1,'Churn']\n",
    "y_train_proba = df1.loc[df1['TRAIN'] == 1,'Predict_Prob_RegLog_1']\n",
    "fpr_train, tpr_train, _ = roc_curve(y_train, y_train_proba)\n",
    "roc_auc_train = auc(fpr_train, tpr_train)\n",
    "\n",
    "y_test = df1.loc[df1['TRAIN'] == 0,'Churn']\n",
    "y_test_proba = df1.loc[df1['TRAIN'] == 0,'Predict_Prob_RegLog_1']\n",
    "fpr_test, tpr_test, _ = roc_curve(y_test, y_test_proba)\n",
    "roc_auc_test = auc(fpr_test, tpr_test)\n",
    "\n",
    "# Grafica las curvas ROC en el mismo gráfico\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.plot(fpr_train, tpr_train, color='darkorange', lw=2, label=f'Train ROC curve (AUC = {roc_auc_train:.2f})')\n",
    "plt.plot(fpr_test, tpr_test, color='cornflowerblue', lw=2, label=f'Test ROC curve (AUC = {roc_auc_test:.2f})')\n",
    "plt.plot([0, 1], [0, 1], color='gray', linestyle='--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('Tasa de Falsos Positivos')\n",
    "plt.ylabel('Tasa de Verdaderos Positivos')\n",
    "plt.title('Curva ROC - MODELO 1')\n",
    "plt.legend(loc='lower right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "id": "8e9577d3",
   "metadata": {},
   "source": [
    "Curva ROC (Receiver Operating Characteristic): La curva ROC es un gráfico que representa la relación entre la tasa de verdaderos positivos (sensibilidad) y la tasa de falsos positivos (1 - especificidad) para diferentes umbrales de decisión del modelo. Cuanto más se acerque la curva ROC al vértice superior izquierdo, mejor será el rendimiento del modelo."
   ]
  },
  {
   "cell_type": "raw",
   "id": "00c52fff",
   "metadata": {},
   "source": [
    "Área bajo la curva (AUC): El AUC es un número que cuantifica el área bajo la curva ROC. AUC varía entre 0 y 1, donde 0 indica un rendimiento pobre (la curva ROC sigue la línea de referencia diagonal) y 1 indica un rendimiento perfecto (la curva ROC alcanza el vértice superior izquierdo). En general, un AUC más cercano a 1 sugiere un mejor rendimiento del modelo."
   ]
  },
  {
   "cell_type": "raw",
   "id": "43bf4f51",
   "metadata": {},
   "source": [
    "TRAIN ROC AUC = 0.79: Indica el rendimiento del modelo en el conjunto de entrenamiento. Cuanto más cerca esté de 1, mejor será la capacidad del modelo para distinguir entre las clases.\n",
    "\n",
    "TEST ROC AUC = 0.80: Indica el rendimiento del modelo en el conjunto de prueba (o test). Similar al caso anterior, un valor más cercano a 1 sugiere un buen rendimiento en datos no vistos."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdc76ba7",
   "metadata": {},
   "source": [
    "Conclusiones:\n",
    "\n",
    "El modelo tiene un buen desempeño en la clasificación general, con un alto valor de accuracy.\n",
    "La precisión y el recall varían entre las clases, con una mayor precisión para la clase 0 y un recall más bajo para la clase 1.\n",
    "El f1-score ponderado proporciona una medida general del rendimiento del modelo.\n",
    "Las métricas de validación cruzada refuerzan la evaluación del modelo en diferentes particiones del conjunto de datos, mostrando una consistencia en su rendimiento.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0dcc670d",
   "metadata": {},
   "source": [
    "## Modelo 2 - CON DIFERENTES FEATURES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51def639",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Genero el modelo\n",
    "formula = \"Churn ~ Cant_Internet+pack+ tenure\"\n",
    "reg_log = smf.logit(formula, data = df1[df1['TRAIN']==1]).fit()\n",
    "# Ver el resumen de resultados\n",
    "print(reg_log.summary())"
   ]
  },
  {
   "cell_type": "raw",
   "id": "5bf377f6",
   "metadata": {},
   "source": [
    "Primer Modelo:\n",
    "Variables del Modelo:\n",
    "\n",
    "Intercepto: -3.2840\n",
    "Contrato (Contract_pred): 4.8797\n",
    "Permanencia (tenure_pred): 3.2284\n",
    "Tipo de Servicio de Internet (InternetService): -0.0987\n",
    "Método de Pago (PaymentMethod): -0.0981\n",
    "Estadísticas de Ajuste del Modelo:\n",
    "\n",
    "Pseudo R-squared: 0.1884\n",
    "Log-Likelihood: -2340.3\n",
    "LL-Null (Log-Likelihood del modelo nulo): -2883.5\n",
    "LLR p-value (Prueba de Razón de Verosimilitud): 6.449e-234\n",
    "Conclusiones:\n",
    "\n",
    "El contrato, la permanencia y el método de pago tienen impacto significativo en la predicción de la tasa de abandono (Churn).\n",
    "El servicio de Internet tiene un p-value cercano al límite de significancia (0.05), por lo que su impacto puede no ser estadísticamente significativo.\n",
    "\n",
    "Segundo Modelo:\n",
    "Variables del Modelo:\n",
    "\n",
    "Intercepto: -0.2309\n",
    "Cantidad de Servicios de Internet (Cant_Internet): -0.3360\n",
    "Tipo de Paquete (pack): 0.2490\n",
    "Permanencia (tenure): -0.0417\n",
    "Estadísticas de Ajuste del Modelo:\n",
    "\n",
    "Pseudo R-squared: 0.1273\n",
    "Log-Likelihood: -2516.4\n",
    "LL-Null: -2883.5\n",
    "LLR p-value: 8.207e-159\n",
    "\n",
    "\n",
    "Conclusiones:\n",
    "\n",
    "La cantidad de servicios de Internet, el tipo de paquete y la permanencia tienen impacto significativo en la predicción de la tasa de abandono.\n",
    "El modelo parece explicar el 12.73% de la variabilidad en la variable de respuesta.\n",
    "Ambos modelos parecen tener un buen ajuste ya que los p-values del modelo (p-value < 0.05) indican que las variables seleccionadas son estadísticamente significativas para predecir la tasa de abandono. El primer modelo tiene un Pseudo R-squared más alto, lo que sugiere que explica una mayor proporción de la variabilidad en comparación con el segundo modelo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5c01e748",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ver coeficientes y p valores\n",
    "coeficientes = reg_log.params\n",
    "pvalores = reg_log.pvalues\n",
    "print(\"\")\n",
    "print(\"Coeficientes:\")\n",
    "print(coeficientes.round(4))\n",
    "print(\"\")\n",
    "print(\"P-Values:\")\n",
    "print(pvalores.round(6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "484bf225",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1) Matriz de Confusión \n",
    "# Paso 1: Clasificar a los Clientes según las predicciones \n",
    "df1['Churn_Pred_1'] = np.where(df1['Predict_Prob_RegLog_1'] > 0.4, 1, 0)\n",
    "\n",
    "# Paso 2:  Calcular la matriz de confusión para test y train\n",
    "confusion_entrenamiento = confusion_matrix(df1[df1['TRAIN'] == 1]['Churn'], \n",
    "                                           df1[df1['TRAIN'] == 1]['Churn_Pred_1'])\n",
    "\n",
    "confusion_test = confusion_matrix(df1[df1['TRAIN'] == 0]['Churn'], \n",
    "                                    df1[df1['TRAIN'] == 0]['Churn_Pred_1'])\n",
    "\n",
    "print('Matriz de Confusión en entrenamiento:')\n",
    "print(confusion_entrenamiento)\n",
    "print('Matriz de Confusión en testeo:')\n",
    "print(confusion_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "283d6f89",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Paso 3: Grafico\n",
    "# Primero defino la estructura de mis gráficos a mostras\n",
    "fig, ax = plt.subplots(nrows = 1,\n",
    "                      ncols = 2,\n",
    "                      figsize = (10,5)) \n",
    "\n",
    "# Luego indico lo que voy a dibujar en el primer cuadrante\n",
    "sns.heatmap(confusion_test, \n",
    "            annot=True, fmt='d', cmap='Greens', cbar=False, \n",
    "            ax=ax[0])\n",
    "ax[0].set_title('Testeo')\n",
    "ax[0].set_xlabel('Predicción')\n",
    "ax[0].set_ylabel('Real')\n",
    "\n",
    "# Luego indico lo que voy a dibujar en el segundo cuadrante\n",
    "sns.heatmap(confusion_entrenamiento, \n",
    "            annot=True, fmt='d', cmap='Blues', cbar=False, \n",
    "            ax=ax[1])\n",
    "ax[1].set_title('Entrenamiento')\n",
    "ax[1].set_xlabel('Predicción')\n",
    "ax[1].set_ylabel('Real')\n",
    "\n",
    "# Muestra\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7aa660f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2) Calculemos las metricas, para eso vamos a guardar el resultado de cada cuadrante para utilizarlos \n",
    "\n",
    "# Paso 1: capturo cada uno de los elementos de la matriz de confusión \n",
    "Total_TEST = sum(sum(confusion_test))\n",
    "Total_TRAIN = sum(sum(confusion_entrenamiento))\n",
    "TP_TEST = confusion_test[1,1]\n",
    "TP_TRAIN = confusion_entrenamiento[1,1]\n",
    "TN_TEST = confusion_test[0,0]\n",
    "TN_TRAIN = confusion_entrenamiento[0,0]\n",
    "FP_TEST = confusion_test[0,1]\n",
    "FP_TRAIN = confusion_entrenamiento[0,1]\n",
    "FN_TEST = confusion_test[1,0]\n",
    "FN_TRAIN = confusion_entrenamiento[1,0]\n",
    "\n",
    "# Paso 2: Calculo métricas\n",
    "Precision_TEST = TP_TEST / (TP_TEST + FP_TEST)\n",
    "Precision_TRAIN = TP_TRAIN / (TP_TRAIN + FP_TRAIN)\n",
    "Recall_TEST = TP_TEST / (TP_TEST + FN_TEST)\n",
    "Recall_TRAIN = TP_TRAIN / (TP_TRAIN + FN_TRAIN)\n",
    "Accurancy_TEST = (TP_TEST + TN_TEST) / Total_TEST\n",
    "Accurancy_TRAIN = (TP_TRAIN + TN_TRAIN) / Total_TRAIN\n",
    "Especificidad_TEST = TN_TEST / (TN_TEST + FP_TEST)\n",
    "Especificidad_TRAIN = TN_TRAIN / (TN_TRAIN + FP_TRAIN)\n",
    "\n",
    "# Paso 3: Presento todo en una misma tabla \n",
    "metricas = pd.DataFrame(columns=['Poblacion', 'Metrica','Valor'])\n",
    "\n",
    "# Precision\n",
    "nuevo_dato = {'Poblacion': 'TEST', \n",
    "              'Metrica': 'Precision',\n",
    "              'Valor': Precision_TEST}\n",
    "metricas = pd.concat([metricas, pd.DataFrame([nuevo_dato])], ignore_index=True)\n",
    "nuevo_dato = {'Poblacion': 'TRAIN', \n",
    "              'Metrica': 'Precision',\n",
    "              'Valor': Precision_TRAIN}\n",
    "metricas = pd.concat([metricas, pd.DataFrame([nuevo_dato])], ignore_index=True)\n",
    "\n",
    "# Recall\n",
    "nuevo_dato = {'Poblacion': 'TEST', \n",
    "              'Metrica': 'Recall',\n",
    "              'Valor': Recall_TEST}\n",
    "metricas = pd.concat([metricas, pd.DataFrame([nuevo_dato])], ignore_index=True)\n",
    "nuevo_dato = {'Poblacion': 'TRAIN', \n",
    "              'Metrica': 'Recall',\n",
    "              'Valor': Recall_TRAIN}\n",
    "metricas = pd.concat([metricas, pd.DataFrame([nuevo_dato])], ignore_index=True)\n",
    "\n",
    "# Accurancy\n",
    "nuevo_dato = {'Poblacion': 'TEST', \n",
    "              'Metrica': 'Accurancy',\n",
    "              'Valor': Accurancy_TEST}\n",
    "metricas = pd.concat([metricas, pd.DataFrame([nuevo_dato])], ignore_index=True)\n",
    "nuevo_dato = {'Poblacion': 'TRAIN', \n",
    "              'Metrica': 'Accurancy',\n",
    "              'Valor': Accurancy_TRAIN}\n",
    "metricas = pd.concat([metricas, pd.DataFrame([nuevo_dato])], ignore_index=True)\n",
    "\n",
    "# Especificidad\n",
    "nuevo_dato = {'Poblacion': 'TEST', \n",
    "              'Metrica': 'Especificidad',\n",
    "              'Valor': Especificidad_TEST}\n",
    "metricas = pd.concat([metricas, pd.DataFrame([nuevo_dato])], ignore_index=True)\n",
    "nuevo_dato = {'Poblacion': 'TRAIN', \n",
    "              'Metrica': 'Especificidad',\n",
    "              'Valor': Especificidad_TRAIN}\n",
    "metricas = pd.concat([metricas, pd.DataFrame([nuevo_dato])], ignore_index=True)\n",
    "\n",
    "# Paso 4: Grafico \n",
    "plt.figure(figsize=(12, 5))\n",
    "sns.barplot(data=metricas,\n",
    "            x='Metrica',\n",
    "            y='Valor',\n",
    "            hue='Poblacion')\n",
    "plt.xlabel('Tipo de Métrica')\n",
    "plt.ylabel('Valor de la Métrica')\n",
    "plt.title('Métricas - MODELO 1')\n",
    "ax = plt.gca()\n",
    "for p in ax.patches:\n",
    "    x_text = p.get_x() + p.get_width() / 2.0\n",
    "    y_text = p.get_height()\n",
    "    ax.text(x_text, y_text, f'{str(round(y_text, 2) * 100)}%',\n",
    "            ha='center',\n",
    "            va='bottom',\n",
    "            fontsize=10, color='black', fontweight='bold')\n",
    "\n",
    "plt.legend(loc='lower right')    \n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3114e005",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3) Curvas de ROC\n",
    "# Calcula las curvas ROC y el área bajo la curva (AUC) para entrenamiento y prueba\n",
    "\n",
    "y_train = df1.loc[df1['TRAIN'] == 1,'Churn']\n",
    "y_train_proba = df1.loc[df1['TRAIN'] == 1,'Predict_Prob_RegLog_1']\n",
    "fpr_train, tpr_train, _ = roc_curve(y_train, y_train_proba)\n",
    "roc_auc_train = auc(fpr_train, tpr_train)\n",
    "\n",
    "y_test = df1.loc[df1['TRAIN'] == 0,'Churn']\n",
    "y_test_proba = df1.loc[df1['TRAIN'] == 0,'Predict_Prob_RegLog_1']\n",
    "fpr_test, tpr_test, _ = roc_curve(y_test, y_test_proba)\n",
    "roc_auc_test = auc(fpr_test, tpr_test)\n",
    "\n",
    "# Grafica las curvas ROC en el mismo gráfico\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.plot(fpr_train, tpr_train, color='darkorange', lw=2, label=f'Train ROC curve (AUC = {roc_auc_train:.2f})')\n",
    "plt.plot(fpr_test, tpr_test, color='cornflowerblue', lw=2, label=f'Test ROC curve (AUC = {roc_auc_test:.2f})')\n",
    "plt.plot([0, 1], [0, 1], color='gray', linestyle='--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('Tasa de Falsos Positivos')\n",
    "plt.ylabel('Tasa de Verdaderos Positivos')\n",
    "plt.title('Curva ROC - MODELO 1')\n",
    "plt.legend(loc='lower right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4ec862b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
